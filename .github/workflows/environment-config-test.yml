name: Environment Configuration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'k8s/**'
      - 'docs/environment-configuration.md'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'k8s/**'
      - 'docs/environment-configuration.md'

jobs:
  test-environment-config:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Test environment configuration
      run: |
        cd frontend
        # Create a test env.js file with test environment variables
        echo 'window.env = { REACT_APP_ENV: "test", REACT_APP_API_BASE_URL: "http://localhost:8081" };' > public/env.js
        
        # Copy env.js to dist directory for the built application
        cp public/env.js dist/env.js
        
        # Start vite preview server to serve the built application
        npm run preview &
        SERVER_PID=$!
        
        # Function to cleanup on exit
        cleanup() {
          echo "Cleaning up server..."
          kill $SERVER_PID 2>/dev/null || true
        }
        trap cleanup EXIT
        
        # Wait for server to start and verify it's running
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4173 > /dev/null; then
            echo "Server is running!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start after 30 seconds"
            echo "Checking if process is still running..."
            ps aux | grep "vite preview" || echo "No vite preview process found"
            echo "Checking port 4173..."
            netstat -tlnp | grep 4173 || echo "Port 4173 not listening"
            exit 1
          fi
          sleep 1
        done
        
        # Additional debugging
        echo "Server status check:"
        curl -v http://localhost:4173 || echo "Curl failed"
        echo "Checking if env.js exists in dist:"
        ls -la dist/env.js || echo "env.js not found in dist"
        echo "Checking if env.js exists in public:"
        ls -la public/env.js || echo "env.js not found in public"
        
        # Run the E2E tests with the custom config
        echo "Running E2E tests..."
        BASE_URL=http://localhost:4173 npx playwright test --config=playwright.config.env.js tests/e2e/debug.spec.js
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: environment-config-test-results
        path: frontend/playwright-report/
        retention-days: 30

  test-docker-environment-injection:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build frontend Docker image
      run: |
        docker build -t playhub-frontend:test frontend/
    
    - name: Test environment injection in Docker
      run: |
        # Test that the Docker entrypoint script works
        docker run --rm -e REACT_APP_ENV=test -e REACT_APP_API_BASE_URL=http://test-api playhub-frontend:test sh -c '
          /docker-entrypoint.d/30-env-injection.sh
          cat /usr/share/nginx/html/env.js
        ' | grep -q "REACT_APP_ENV.*test"
    
    - name: Test different environment configurations
      run: |
        # Test staging environment
        docker run --rm -e REACT_APP_ENV=staging -e REACT_APP_API_BASE_URL=https://api-staging.playhub.com playhub-frontend:test sh -c '
          /docker-entrypoint.d/30-env-injection.sh
          cat /usr/share/nginx/html/env.js
        ' | grep -q "staging"
        
        # Test production environment
        docker run --rm -e REACT_APP_ENV=production -e REACT_APP_API_BASE_URL=https://api.playhub.com playhub-frontend:test sh -c '
          /docker-entrypoint.d/30-env-injection.sh
          cat /usr/share/nginx/html/env.js
        ' | grep -q "production"

  test-kubernetes-configmaps:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Kubernetes ConfigMaps
      run: |
        # Test that all environment ConfigMaps exist and have basic YAML structure
        for config_file in k8s/env/*.yaml; do
          echo "Validating $config_file"
          if [ ! -f "$config_file" ]; then
            echo "❌ ConfigMap file not found: $config_file"
            exit 1
          fi
          # Basic YAML validation - check for key YAML indicators
          if ! grep -q "kind:" "$config_file" || ! grep -q "metadata:" "$config_file"; then
            echo "❌ Invalid YAML structure in $config_file"
            exit 1
          fi
        done
        echo "✅ All ConfigMaps have valid structure"
    
    - name: Validate environment variables in ConfigMaps
      run: |
        # Check that all ConfigMaps have required environment variables
        for env_file in k8s/env/*.yaml; do
          echo "Validating $env_file"
          grep -q "REACT_APP_ENV" "$env_file" || (echo "Missing REACT_APP_ENV in $env_file" && exit 1)
          grep -q "REACT_APP_API_BASE_URL" "$env_file" || (echo "Missing REACT_APP_API_BASE_URL in $env_file" && exit 1)
        done
    
    - name: Test deployment scripts
      run: |
        # Test that deployment scripts are executable and valid
        chmod +x scripts/deploy-*.sh
        for script in scripts/deploy-*.sh; do
          echo "Validating $script"
          bash -n "$script" || (echo "Syntax error in $script" && exit 1)
        done
