// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateGameInput struct {
	Name string `json:"name"`
}

type DigitalGood struct {
	ID          string  `json:"id"`
	Code        string  `json:"code"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Game        *Game   `json:"game,omitempty"`
}

type Entitlement struct {
	Good      *DigitalGood `json:"good"`
	Quantity  int          `json:"quantity"`
	GrantedAt time.Time    `json:"grantedAt"`
}

type Game struct {
	ID             string     `json:"id"`
	Name           string     `json:"name"`
	CreatedAt      time.Time  `json:"createdAt"`
	ActiveSessions []*Session `json:"activeSessions"`
}

type JoinResult struct {
	Queued    bool    `json:"queued"`
	SessionID *string `json:"sessionId,omitempty"`
	JoinURL   *string `json:"joinUrl,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Session struct {
	ID        string        `json:"id"`
	Game      *Game         `json:"game"`
	Status    SessionStatus `json:"status"`
	CreatedAt time.Time     `json:"createdAt"`
	Players   []*User       `json:"players"`
}

type User struct {
	ID          string    `json:"id"`
	Email       *string   `json:"email,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
}

type SessionStatus string

const (
	SessionStatusPending SessionStatus = "PENDING"
	SessionStatusActive  SessionStatus = "ACTIVE"
	SessionStatusEnded   SessionStatus = "ENDED"
)

var AllSessionStatus = []SessionStatus{
	SessionStatusPending,
	SessionStatusActive,
	SessionStatusEnded,
}

func (e SessionStatus) IsValid() bool {
	switch e {
	case SessionStatusPending, SessionStatusActive, SessionStatusEnded:
		return true
	}
	return false
}

func (e SessionStatus) String() string {
	return string(e)
}

func (e *SessionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionStatus", str)
	}
	return nil
}

func (e SessionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SessionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SessionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
